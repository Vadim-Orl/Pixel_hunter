{"version":3,"names":[],"mappings":"","sources":["model/game-screen.js"],"sourcesContent":["import GameView from '../view/Game-view.js';\nimport Router from '../controller/router.js';\nimport HeaderView from '../view/Header-view.js';\nimport StatisticView from '../view/Statistic-view.js';\n\nconst ONE_SECOND = 1000;\nconst showPlayerHeader = true;\n\nexport default class GameScreen {\n  constructor(model) {\n    this.model = model;\n    this.root = document.createElement('div');\n\n    this._timer = null;\n    this._timeAnswer = 0;\n\n    this.updateHeader = this.updateHeader.bind(this)\n    this.startGame = this.startGame.bind(this)\n    this._tick = this._tick.bind(this)\n    this.changeLevel = this.changeLevel.bind(this)\n  }\n\n  get element() {\n    return this.root;\n  }\n\n  changeLevel() {\n    this._timeAnswer = 0;\n    this.updateHeader();\n    this.updateStatistic();\n    const levelData = this.model.data[this.model.getCurrentLevel()];\n    const level = new GameView(levelData, this.model.getCurrentLevel())\n\n    this.changeContentView(level);\n    level.onAnswer = this.onAnswer.bind(this);\n    level.resizeImages();\n  }\n\n  startGame() {\n    this.header = new HeaderView(this.model.state, showPlayerHeader);\n    this.content = new GameView(this.model.data[this.model.getCurrentLevel()], this.model.getCurrentLevel())\n    this.statistic = new StatisticView(this.model.state);\n\n    this.root.appendChild(this.header.element);\n    this.root.appendChild(this.content.element);\n    this.root.appendChild(this.statistic.element);\n\n    this.content.onAnswer = this.onAnswer.bind(this);\n    this.content.resizeImages();\n    this._tick();\n  }\n\n  stopGame() {\n    clearInterval(this._timer);\n  }\n\n  endGame(isFail) {\n    this.model.isFail = isFail;\n    this.model.resultPoints = this.model.resultGame()\n    Router.showResult(this.model, isFail);\n  }\n\n  _tick() {\n    if (this.model.state.time > 0) {\n      this.model.tick()\n      this._timeAnswer++;\n      this.updateHeader();\n      this._timer = setTimeout(() => this._tick(), ONE_SECOND);\n    } else {\n      this.endGame(true);\n    }\n  }\n\n  onAnswer(...answer) {\n    this.stopGame();\n\n    const questionBd = this.model.data[this.model.getCurrentLevel()];\n    let isCorrectAnsw = false;\n    let findElement;\n\n    switch (questionBd.type) {\n      case 'singleQuestion':\n      case 'doubleQuestion':\n        isCorrectAnsw = answer.every((el, index) => {\n          return (questionBd.options[index].answer === el)\n        })\n        break;\n\n      case 'tripleQuestion':\n        findElement = questionBd.options.find((el) => {\n          return el.alt === answer[0].alt;\n        })\n        isCorrectAnsw = (findElement.answer === 'paint');\n\n        break;\n      default: throw new Error('Could not process user response. Check database');\n    }\n\n    this.model.answer(isCorrectAnsw, this._timeAnswer);\n\n    if (this.model.isGameOver()) {\n      this.endGame(true);\n    } else if (this.model.hasNextLevel()) {\n      this.model.nextLevel();\n      this.changeLevel();\n    } else {\n      this.endGame(false);\n    }\n  }\n\n  updateHeader() {\n    const header = new HeaderView(this.model.state, showPlayerHeader);\n    this.root.replaceChild(header.element, this.header.element)\n    header.onClick = () => {\n      this.stopGame();\n      Router.showWellcom();\n    }\n    this.header = header;\n  }\n\n  changeContentView(view) {\n    this.root.replaceChild(view.element, this.content.element);\n    this.content = view;\n  }\n\n  updateStatistic() {\n    const statistic = new StatisticView(this.model.state);\n    this.root.replaceChild(statistic.element, this.statistic.element);\n    this.statistic = statistic;\n  }\n}\n"],"file":"game-screen.js"}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtb2RlbC9nYW1lLXNjcmVlbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2FtZVZpZXcgZnJvbSAnLi4vdmlldy9HYW1lLXZpZXcuanMnO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuLi9jb250cm9sbGVyL3JvdXRlci5qcyc7XG5pbXBvcnQgSGVhZGVyVmlldyBmcm9tICcuLi92aWV3L0hlYWRlci12aWV3LmpzJztcbmltcG9ydCBTdGF0aXN0aWNWaWV3IGZyb20gJy4uL3ZpZXcvU3RhdGlzdGljLXZpZXcuanMnO1xuXG5jb25zdCBPTkVfU0VDT05EID0gMTAwMDtcbmNvbnN0IHNob3dQbGF5ZXJIZWFkZXIgPSB0cnVlO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lU2NyZWVuIHtcbiAgY29uc3RydWN0b3IobW9kZWwpIHtcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgdGhpcy5yb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgdGhpcy5fdGltZUFuc3dlciA9IDA7XG5cbiAgICB0aGlzLnVwZGF0ZUhlYWRlciA9IHRoaXMudXBkYXRlSGVhZGVyLmJpbmQodGhpcylcbiAgICB0aGlzLnN0YXJ0R2FtZSA9IHRoaXMuc3RhcnRHYW1lLmJpbmQodGhpcylcbiAgICB0aGlzLl90aWNrID0gdGhpcy5fdGljay5iaW5kKHRoaXMpXG4gICAgdGhpcy5jaGFuZ2VMZXZlbCA9IHRoaXMuY2hhbmdlTGV2ZWwuYmluZCh0aGlzKVxuICB9XG5cbiAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMucm9vdDtcbiAgfVxuXG4gIGNoYW5nZUxldmVsKCkge1xuICAgIHRoaXMuX3RpbWVBbnN3ZXIgPSAwO1xuICAgIHRoaXMudXBkYXRlSGVhZGVyKCk7XG4gICAgdGhpcy51cGRhdGVTdGF0aXN0aWMoKTtcbiAgICBjb25zdCBsZXZlbERhdGEgPSB0aGlzLm1vZGVsLmRhdGFbdGhpcy5tb2RlbC5nZXRDdXJyZW50TGV2ZWwoKV07XG4gICAgY29uc3QgbGV2ZWwgPSBuZXcgR2FtZVZpZXcobGV2ZWxEYXRhLCB0aGlzLm1vZGVsLmdldEN1cnJlbnRMZXZlbCgpKVxuXG4gICAgdGhpcy5jaGFuZ2VDb250ZW50VmlldyhsZXZlbCk7XG4gICAgbGV2ZWwub25BbnN3ZXIgPSB0aGlzLm9uQW5zd2VyLmJpbmQodGhpcyk7XG4gICAgbGV2ZWwucmVzaXplSW1hZ2VzKCk7XG4gIH1cblxuICBzdGFydEdhbWUoKSB7XG4gICAgdGhpcy5oZWFkZXIgPSBuZXcgSGVhZGVyVmlldyh0aGlzLm1vZGVsLnN0YXRlLCBzaG93UGxheWVySGVhZGVyKTtcbiAgICB0aGlzLmNvbnRlbnQgPSBuZXcgR2FtZVZpZXcodGhpcy5tb2RlbC5kYXRhW3RoaXMubW9kZWwuZ2V0Q3VycmVudExldmVsKCldLCB0aGlzLm1vZGVsLmdldEN1cnJlbnRMZXZlbCgpKVxuICAgIHRoaXMuc3RhdGlzdGljID0gbmV3IFN0YXRpc3RpY1ZpZXcodGhpcy5tb2RlbC5zdGF0ZSk7XG5cbiAgICB0aGlzLnJvb3QuYXBwZW5kQ2hpbGQodGhpcy5oZWFkZXIuZWxlbWVudCk7XG4gICAgdGhpcy5yb290LmFwcGVuZENoaWxkKHRoaXMuY29udGVudC5lbGVtZW50KTtcbiAgICB0aGlzLnJvb3QuYXBwZW5kQ2hpbGQodGhpcy5zdGF0aXN0aWMuZWxlbWVudCk7XG5cbiAgICB0aGlzLmNvbnRlbnQub25BbnN3ZXIgPSB0aGlzLm9uQW5zd2VyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jb250ZW50LnJlc2l6ZUltYWdlcygpO1xuICAgIHRoaXMuX3RpY2soKTtcbiAgfVxuXG4gIHN0b3BHYW1lKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fdGltZXIpO1xuICB9XG5cbiAgZW5kR2FtZShpc0ZhaWwpIHtcbiAgICB0aGlzLm1vZGVsLmlzRmFpbCA9IGlzRmFpbDtcbiAgICB0aGlzLm1vZGVsLnJlc3VsdFBvaW50cyA9IHRoaXMubW9kZWwucmVzdWx0R2FtZSgpXG4gICAgUm91dGVyLnNob3dSZXN1bHQodGhpcy5tb2RlbCwgaXNGYWlsKTtcbiAgfVxuXG4gIF90aWNrKCkge1xuICAgIGlmICh0aGlzLm1vZGVsLnN0YXRlLnRpbWUgPiAwKSB7XG4gICAgICB0aGlzLm1vZGVsLnRpY2soKVxuICAgICAgdGhpcy5fdGltZUFuc3dlcisrO1xuICAgICAgdGhpcy51cGRhdGVIZWFkZXIoKTtcbiAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLl90aWNrKCksIE9ORV9TRUNPTkQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVuZEdhbWUodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgb25BbnN3ZXIoLi4uYW5zd2VyKSB7XG4gICAgdGhpcy5zdG9wR2FtZSgpO1xuXG4gICAgY29uc3QgcXVlc3Rpb25CZCA9IHRoaXMubW9kZWwuZGF0YVt0aGlzLm1vZGVsLmdldEN1cnJlbnRMZXZlbCgpXTtcbiAgICBsZXQgaXNDb3JyZWN0QW5zdyA9IGZhbHNlO1xuICAgIGxldCBmaW5kRWxlbWVudDtcblxuICAgIHN3aXRjaCAocXVlc3Rpb25CZC50eXBlKSB7XG4gICAgICBjYXNlICdzaW5nbGVRdWVzdGlvbic6XG4gICAgICBjYXNlICdkb3VibGVRdWVzdGlvbic6XG4gICAgICAgIGlzQ29ycmVjdEFuc3cgPSBhbnN3ZXIuZXZlcnkoKGVsLCBpbmRleCkgPT4ge1xuICAgICAgICAgIHJldHVybiAocXVlc3Rpb25CZC5vcHRpb25zW2luZGV4XS5hbnN3ZXIgPT09IGVsKVxuICAgICAgICB9KVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndHJpcGxlUXVlc3Rpb24nOlxuICAgICAgICBmaW5kRWxlbWVudCA9IHF1ZXN0aW9uQmQub3B0aW9ucy5maW5kKChlbCkgPT4ge1xuICAgICAgICAgIHJldHVybiBlbC5hbHQgPT09IGFuc3dlclswXS5hbHQ7XG4gICAgICAgIH0pXG4gICAgICAgIGlzQ29ycmVjdEFuc3cgPSAoZmluZEVsZW1lbnQuYW5zd2VyID09PSAncGFpbnQnKTtcblxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHByb2Nlc3MgdXNlciByZXNwb25zZS4gQ2hlY2sgZGF0YWJhc2UnKTtcbiAgICB9XG5cbiAgICB0aGlzLm1vZGVsLmFuc3dlcihpc0NvcnJlY3RBbnN3LCB0aGlzLl90aW1lQW5zd2VyKTtcblxuICAgIGlmICh0aGlzLm1vZGVsLmlzR2FtZU92ZXIoKSkge1xuICAgICAgdGhpcy5lbmRHYW1lKHRydWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlbC5oYXNOZXh0TGV2ZWwoKSkge1xuICAgICAgdGhpcy5tb2RlbC5uZXh0TGV2ZWwoKTtcbiAgICAgIHRoaXMuY2hhbmdlTGV2ZWwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbmRHYW1lKGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVIZWFkZXIoKSB7XG4gICAgY29uc3QgaGVhZGVyID0gbmV3IEhlYWRlclZpZXcodGhpcy5tb2RlbC5zdGF0ZSwgc2hvd1BsYXllckhlYWRlcik7XG4gICAgdGhpcy5yb290LnJlcGxhY2VDaGlsZChoZWFkZXIuZWxlbWVudCwgdGhpcy5oZWFkZXIuZWxlbWVudClcbiAgICBoZWFkZXIub25DbGljayA9ICgpID0+IHtcbiAgICAgIHRoaXMuc3RvcEdhbWUoKTtcbiAgICAgIFJvdXRlci5zaG93V2VsbGNvbSgpO1xuICAgIH1cbiAgICB0aGlzLmhlYWRlciA9IGhlYWRlcjtcbiAgfVxuXG4gIGNoYW5nZUNvbnRlbnRWaWV3KHZpZXcpIHtcbiAgICB0aGlzLnJvb3QucmVwbGFjZUNoaWxkKHZpZXcuZWxlbWVudCwgdGhpcy5jb250ZW50LmVsZW1lbnQpO1xuICAgIHRoaXMuY29udGVudCA9IHZpZXc7XG4gIH1cblxuICB1cGRhdGVTdGF0aXN0aWMoKSB7XG4gICAgY29uc3Qgc3RhdGlzdGljID0gbmV3IFN0YXRpc3RpY1ZpZXcodGhpcy5tb2RlbC5zdGF0ZSk7XG4gICAgdGhpcy5yb290LnJlcGxhY2VDaGlsZChzdGF0aXN0aWMuZWxlbWVudCwgdGhpcy5zdGF0aXN0aWMuZWxlbWVudCk7XG4gICAgdGhpcy5zdGF0aXN0aWMgPSBzdGF0aXN0aWM7XG4gIH1cbn1cbiJdLCJmaWxlIjoiZ2FtZS1zY3JlZW4uanMifQ==