import { isGameModel } from "../types/type-guards.js";
import { CONSTANTS } from "./constants.js";
const INITIAL_GAME = Object.freeze({
    results: new Array(CONSTANTS.OPTION_GAME.MAX_QUESTIONS).fill(CONSTANTS.LIBRARY_TYPE_ANSWERS.unknown),
    level: CONSTANTS.OPTION_GAME.START_LEVEL,
    lives: CONSTANTS.OPTION_GAME.MAX_LIVES,
    time: CONSTANTS.OPTION_GAME.TIME_FOR_QUESTION,
    questions: CONSTANTS.OPTION_GAME.MAX_QUESTIONS
});
const resultGame = (game) => {
    if (game.results.length < CONSTANTS.OPTION_GAME.MAX_QUESTIONS) {
        return -1;
    }
    let summ = 0;
    game.results.forEach((element) => {
        summ += CONSTANTS.LIBRARY_ANSWER_POINT[element];
        element === CONSTANTS.LIBRARY_TYPE_ANSWERS.fast || element === CONSTANTS.LIBRARY_TYPE_ANSWERS.slow ? summ += 100 : summ;
    });
    summ += game.lives * CONSTANTS.LIBRARY_ANSWER_POINT.balanceLivePoint;
    return summ;
};
const changeLevel = (game, level) => {
    if (level < 0) {
        return game.level;
    }
    if (level >= game.questions) {
        return 0;
    }
    const newLevel = level;
    const newGame = { ...game, level: newLevel };
    return newGame;
};
const decLives = (game) => {
    if (game.lives < 1) {
        return new Error('Error lives < 1');
    }
    console.log(game);
    const newLives = game.lives - 1;
    console.log('hello ' + newLives);
    const newGame = { ...game, lives: newLives };
    return newGame;
};
const tick = (game) => {
    const newGame = { ...game };
    newGame.time -= 1;
    return newGame;
};
const answer = (game, isCorrectAnsw, timeAnswer) => {
    let newGame = JSON.parse(JSON.stringify(game));
    if (!isCorrectAnsw) {
        newGame.results[newGame.level] = CONSTANTS.LIBRARY_TYPE_ANSWERS.wrong;
        const tmpNewGame = decLives(newGame);
        if (isGameModel(tmpNewGame)) {
            newGame = tmpNewGame;
        }
    }
    else {
        switch (true) {
            case (timeAnswer <= 3): {
                newGame.results[newGame.level] = CONSTANTS.LIBRARY_TYPE_ANSWERS.fast;
                break;
            }
            case (timeAnswer > 5): {
                newGame.results[newGame.level] = CONSTANTS.LIBRARY_TYPE_ANSWERS.slow;
                break;
            }
            default: {
                newGame.results[newGame.level] = CONSTANTS.LIBRARY_TYPE_ANSWERS.correct;
            }
        }
    }
    return newGame;
};
export { INITIAL_GAME, changeLevel, decLives, tick, resultGame, answer };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzL2Jpc25lc0Z1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsU0FBUyxFQUF5QixNQUFNLGdCQUFnQixDQUFDO0FBY2xFLE1BQU0sWUFBWSxHQUFlLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDN0MsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUM7SUFDcEcsS0FBSyxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVztJQUN4QyxLQUFLLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTO0lBQ3RDLElBQUksRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLGlCQUFpQjtJQUM3QyxTQUFTLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhO0NBQy9DLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBZ0IsRUFBVSxFQUFFO0lBQzlDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM5RCxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQ1gsQ0FBQztJQUVELElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBZSxFQUFFLEVBQUU7UUFDdkMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoRCxPQUFPLEtBQUssU0FBUyxDQUFDLG9CQUFvQixDQUFDLElBQUksSUFBSSxPQUFPLEtBQUssU0FBUyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzFILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDO0lBRXJFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFBO0FBR0QsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEtBQWEsRUFBdUIsRUFBRTtJQUMzRSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNkLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQztJQUV2QixNQUFNLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUM3QyxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQWdCLEVBQXNCLEVBQUU7SUFDeEQsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ25CLE9BQU8sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNqQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQTtJQUVoQyxNQUFNLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUM3QyxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLElBQUksR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRTtJQUNoQyxNQUFNLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUM7SUFDNUIsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7SUFDbEIsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFnQixFQUFFLGFBQXNCLEVBQUUsVUFBa0IsRUFBRSxFQUFFO0lBQzlFLElBQUksT0FBTyxHQUFlLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBRTFELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNuQixPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDO1FBRXRFLE1BQU0sVUFBVSxHQUF1QixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFekQsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUMsQ0FBQztZQUMzQixPQUFPLEdBQUcsVUFBVSxDQUFBO1FBQ3RCLENBQUM7SUFDSCxDQUFDO1NBQU0sQ0FBQztRQUNOLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFDYixLQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsU0FBUyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQztnQkFDckUsTUFBTTtZQUNSLENBQUM7WUFDRCxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsU0FBUyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQztnQkFDckUsTUFBTTtZQUNSLENBQUM7WUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNSLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUM7WUFDMUUsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFBO0FBRUQsT0FBUSxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLENBQUEiLCJmaWxlIjoidXRpbHMvYmlzbmVzRnVuY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0dhbWVNb2RlbCB9IGZyb20gXCIuLi90eXBlcy90eXBlLWd1YXJkcy5qc1wiO1xuaW1wb3J0IHsgQ09OU1RBTlRTLCBUTElCUkFSWV9UWVBFX0FOU1dFUlMgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcblxudHlwZSBUUmVzdWwgPSAnd3JvbmcnIHwgJ3Nsb3cnIHwnZmFzdCd8ICdjb3JyZWN0JyB8ICd1bmtub3duJ1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlR2FtZSB7XG4gICByZXN1bHRzOiBhbnksXG4gICBsZXZlbDogbnVtYmVyLFxuICAgbGl2ZXM6IG51bWJlcixcbiAgIHRpbWU6IG51bWJlcixcbiAgIHF1ZXN0aW9uczogbnVtYmVyXG59XG5cblxuY29uc3QgSU5JVElBTF9HQU1FOiBJU3RhdGVHYW1lID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHJlc3VsdHM6IG5ldyBBcnJheShDT05TVEFOVFMuT1BUSU9OX0dBTUUuTUFYX1FVRVNUSU9OUykuZmlsbChDT05TVEFOVFMuTElCUkFSWV9UWVBFX0FOU1dFUlMudW5rbm93biksXG4gIGxldmVsOiBDT05TVEFOVFMuT1BUSU9OX0dBTUUuU1RBUlRfTEVWRUwsXG4gIGxpdmVzOiBDT05TVEFOVFMuT1BUSU9OX0dBTUUuTUFYX0xJVkVTLFxuICB0aW1lOiBDT05TVEFOVFMuT1BUSU9OX0dBTUUuVElNRV9GT1JfUVVFU1RJT04sXG4gIHF1ZXN0aW9uczogQ09OU1RBTlRTLk9QVElPTl9HQU1FLk1BWF9RVUVTVElPTlNcbn0pO1xuXG5jb25zdCByZXN1bHRHYW1lID0gKGdhbWU6IElTdGF0ZUdhbWUpOiBudW1iZXIgPT4ge1xuICBpZiAoZ2FtZS5yZXN1bHRzLmxlbmd0aCA8IENPTlNUQU5UUy5PUFRJT05fR0FNRS5NQVhfUVVFU1RJT05TKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cblxuICBsZXQgc3VtbSA9IDA7XG4gIGdhbWUucmVzdWx0cy5mb3JFYWNoKChlbGVtZW50OiBUUmVzdWwpID0+IHtcbiAgICBzdW1tICs9IENPTlNUQU5UUy5MSUJSQVJZX0FOU1dFUl9QT0lOVFtlbGVtZW50XTtcbiAgICBlbGVtZW50ID09PSBDT05TVEFOVFMuTElCUkFSWV9UWVBFX0FOU1dFUlMuZmFzdCB8fCBlbGVtZW50ID09PSBDT05TVEFOVFMuTElCUkFSWV9UWVBFX0FOU1dFUlMuc2xvdyA/IHN1bW0gKz0gMTAwIDogc3VtbTtcbiAgfSk7XG5cbiAgc3VtbSArPSBnYW1lLmxpdmVzICogQ09OU1RBTlRTLkxJQlJBUllfQU5TV0VSX1BPSU5ULmJhbGFuY2VMaXZlUG9pbnQ7XG5cbiAgcmV0dXJuIHN1bW07XG59XG5cblxuY29uc3QgY2hhbmdlTGV2ZWwgPSAoZ2FtZTogSVN0YXRlR2FtZSwgbGV2ZWw6IG51bWJlcik6IG51bWJlciB8IElTdGF0ZUdhbWUgPT4ge1xuICBpZiAobGV2ZWwgPCAwKSB7XG4gICAgcmV0dXJuIGdhbWUubGV2ZWw7XG4gIH1cblxuICBpZiAobGV2ZWwgPj0gZ2FtZS5xdWVzdGlvbnMpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGNvbnN0IG5ld0xldmVsID0gbGV2ZWw7XG5cbiAgY29uc3QgbmV3R2FtZSA9IHsgLi4uZ2FtZSwgbGV2ZWw6IG5ld0xldmVsIH07XG4gIHJldHVybiBuZXdHYW1lO1xufVxuXG5jb25zdCBkZWNMaXZlcyA9IChnYW1lOiBJU3RhdGVHYW1lKTogSVN0YXRlR2FtZSB8IEVycm9yID0+IHtcbiAgaWYgKGdhbWUubGl2ZXMgPCAxKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignRXJyb3IgbGl2ZXMgPCAxJylcbiAgfVxuICBjb25zb2xlLmxvZyhnYW1lKVxuICBjb25zdCBuZXdMaXZlcyA9IGdhbWUubGl2ZXMgLSAxO1xuICBjb25zb2xlLmxvZygnaGVsbG8gJyArIG5ld0xpdmVzKVxuXG4gIGNvbnN0IG5ld0dhbWUgPSB7IC4uLmdhbWUsIGxpdmVzOiBuZXdMaXZlcyB9O1xuICByZXR1cm4gbmV3R2FtZTtcbn1cblxuY29uc3QgdGljayA9IChnYW1lOiBJU3RhdGVHYW1lKSA9PiB7XG4gIGNvbnN0IG5ld0dhbWUgPSB7IC4uLmdhbWUgfTtcbiAgbmV3R2FtZS50aW1lIC09IDE7XG4gIHJldHVybiBuZXdHYW1lO1xufVxuXG5jb25zdCBhbnN3ZXIgPSAoZ2FtZTogSVN0YXRlR2FtZSwgaXNDb3JyZWN0QW5zdzogYm9vbGVhbiwgdGltZUFuc3dlcjogbnVtYmVyKSA9PiB7XG4gIGxldCBuZXdHYW1lOiBJU3RhdGVHYW1lID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShnYW1lKSlcblxuICBpZiAoIWlzQ29ycmVjdEFuc3cpIHtcbiAgICBuZXdHYW1lLnJlc3VsdHNbbmV3R2FtZS5sZXZlbF0gPSBDT05TVEFOVFMuTElCUkFSWV9UWVBFX0FOU1dFUlMud3Jvbmc7XG5cbiAgICBjb25zdCB0bXBOZXdHYW1lOiBFcnJvciB8IElTdGF0ZUdhbWUgPSBkZWNMaXZlcyhuZXdHYW1lKTtcblxuICAgIGlmIChpc0dhbWVNb2RlbCh0bXBOZXdHYW1lKSl7XG4gICAgICBuZXdHYW1lID0gdG1wTmV3R2FtZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgKHRpbWVBbnN3ZXIgPD0gMyk6IHtcbiAgICAgICAgbmV3R2FtZS5yZXN1bHRzW25ld0dhbWUubGV2ZWxdID0gQ09OU1RBTlRTLkxJQlJBUllfVFlQRV9BTlNXRVJTLmZhc3Q7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAodGltZUFuc3dlciA+IDUpOiB7XG4gICAgICAgIG5ld0dhbWUucmVzdWx0c1tuZXdHYW1lLmxldmVsXSA9IENPTlNUQU5UUy5MSUJSQVJZX1RZUEVfQU5TV0VSUy5zbG93O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgbmV3R2FtZS5yZXN1bHRzW25ld0dhbWUubGV2ZWxdID0gQ09OU1RBTlRTLkxJQlJBUllfVFlQRV9BTlNXRVJTLmNvcnJlY3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0dhbWU7XG59XG5cbmV4cG9ydCAge0lOSVRJQUxfR0FNRSwgY2hhbmdlTGV2ZWwsIGRlY0xpdmVzLCB0aWNrLCByZXN1bHRHYW1lLCBhbnN3ZXJ9XG5cbiJdfQ==