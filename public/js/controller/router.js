import utils from '../utils/utils.js';
import IntroView from '../view/intro-view.js';
import RulesView from '../view/Rules-view.js';
import QuestModel from '../model/quest-model.js';
import FinelyStatisticView from '../view/FinelyStatistic-view.js';
import GameScreen from '../model/game-screen.js';
import HeaderView from '../view/Header-view.js';
// import SplashScreen from '../view/Splash-view.js';
import ErrorView from '../view/Error-view.js';
import Loader from '../utils/loader.js';
import GreetingView from '../view/Greeting-view.js';
let questData;
let questResult;
export default class Router {
    static start() {
        Router.load().catch(Router.showError);
    }
    static async load() {
        // const splash = new SplashScreen();
        // utils.showScreen(utils.newCentralContainer(splash));
        // splash.start();
        try {
            questData = await Loader.testData();
            Router.showWellcom();
        }
        catch (e) {
            if (e instanceof Error) {
                Router.showError(e);
            }
        }
        finally {
            // splash.stop()
        }
    }
    static showWellcom() {
        const introScreen = new IntroView();
        utils.showScreen(utils.newCentralContainer(introScreen));
    }
    static showGreeting() {
        const header = new HeaderView();
        const greetingScreen = new GreetingView();
        utils.showScreen(utils.newCentralContainer(header, greetingScreen));
    }
    static showRules() {
        const header = new HeaderView();
        const rulesScreen = new RulesView();
        utils.showScreen(utils.newCentralContainer(header, rulesScreen));
    }
    static showGame(namePlayel) {
        const gameModel = new QuestModel(questData, namePlayel);
        const gameScreen = new GameScreen(gameModel);
        utils.showScreen(utils.newCentralContainer(gameScreen));
        gameScreen.startGame();
    }
    static async showResult(game, isFail) {
        const header = new HeaderView();
        const finelStatistic = new FinelyStatisticView(game, isFail);
        utils.showScreen(utils.newCentralContainer(header, finelStatistic));
        try {
            questResult = await Loader.loadResult();
            finelStatistic.showScores(questResult);
        }
        catch (e) {
            if (e instanceof TypeError) {
                Router.showError(e);
            }
        }
        Loader.saveResults(game);
    }
    static showError(error) {
        const errorScreen = new ErrorView(error);
        utils.showScreen(utils.newCentralContainer(errorScreen));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBTSxjQUFjLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFN0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDO1lBQ0gsV0FBVyxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3hDLGNBQWMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsWUFBWSxTQUFTLEVBQUUsQ0FBQztnQkFDM0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixDQUFDO1FBQ0gsQ0FBQztRQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBWTtRQUNsQyxNQUFNLFdBQVcsR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRiIsImZpbGUiOiJjb250cm9sbGVyL3JvdXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XG5pbXBvcnQgSW50cm9WaWV3IGZyb20gJy4uL3ZpZXcvaW50cm8tdmlldy5qcyc7XG5cbmltcG9ydCBSdWxlc1ZpZXcgZnJvbSAnLi4vdmlldy9SdWxlcy12aWV3LmpzJztcbmltcG9ydCBRdWVzdE1vZGVsLCB7IElRdWVzdE1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvcXVlc3QtbW9kZWwuanMnO1xuaW1wb3J0IEZpbmVseVN0YXRpc3RpY1ZpZXcgZnJvbSAnLi4vdmlldy9GaW5lbHlTdGF0aXN0aWMtdmlldy5qcyc7XG5pbXBvcnQgR2FtZVNjcmVlbiBmcm9tICcuLi9tb2RlbC9nYW1lLXNjcmVlbi5qcyc7XG5pbXBvcnQgSGVhZGVyVmlldyBmcm9tICcuLi92aWV3L0hlYWRlci12aWV3LmpzJztcbi8vIGltcG9ydCBTcGxhc2hTY3JlZW4gZnJvbSAnLi4vdmlldy9TcGxhc2gtdmlldy5qcyc7XG5pbXBvcnQgRXJyb3JWaWV3IGZyb20gJy4uL3ZpZXcvRXJyb3Itdmlldy5qcyc7XG5pbXBvcnQgTG9hZGVyIGZyb20gJy4uL3V0aWxzL2xvYWRlci5qcyc7XG5pbXBvcnQgR3JlZXRpbmdWaWV3IGZyb20gJy4uL3ZpZXcvR3JlZXRpbmctdmlldy5qcyc7XG5pbXBvcnQgeyBJR2FtZURhdGEgfSBmcm9tICcuLi90eXBlcy90eXBlcy5qcyc7XG5cbmxldCBxdWVzdERhdGE6IElHYW1lRGF0YVtdO1xubGV0IHF1ZXN0UmVzdWx0O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXIge1xuICBwdWJsaWMgc3RhdGljIHN0YXJ0KCkge1xuICAgIFJvdXRlci5sb2FkKCkuY2F0Y2goUm91dGVyLnNob3dFcnJvcik7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIGxvYWQoKSB7XG4gICAgLy8gY29uc3Qgc3BsYXNoID0gbmV3IFNwbGFzaFNjcmVlbigpO1xuICAgIC8vIHV0aWxzLnNob3dTY3JlZW4odXRpbHMubmV3Q2VudHJhbENvbnRhaW5lcihzcGxhc2gpKTtcbiAgICAvLyBzcGxhc2guc3RhcnQoKTtcbiAgICB0cnkge1xuICAgICAgcXVlc3REYXRhID0gYXdhaXQgTG9hZGVyLnRlc3REYXRhKCk7XG4gICAgICBSb3V0ZXIuc2hvd1dlbGxjb20oKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIFJvdXRlci5zaG93RXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIHNwbGFzaC5zdG9wKClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNob3dXZWxsY29tKCkge1xuICAgIGNvbnN0IGludHJvU2NyZWVuID0gbmV3IEludHJvVmlldygpXG4gICAgdXRpbHMuc2hvd1NjcmVlbih1dGlscy5uZXdDZW50cmFsQ29udGFpbmVyKGludHJvU2NyZWVuKSlcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2hvd0dyZWV0aW5nKCkge1xuICAgIGNvbnN0IGhlYWRlciA9IG5ldyBIZWFkZXJWaWV3KCk7XG4gICAgY29uc3QgZ3JlZXRpbmdTY3JlZW4gPSBuZXcgR3JlZXRpbmdWaWV3KCk7XG5cbiAgICB1dGlscy5zaG93U2NyZWVuKHV0aWxzLm5ld0NlbnRyYWxDb250YWluZXIoaGVhZGVyLCBncmVldGluZ1NjcmVlbikpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzaG93UnVsZXMoKSB7XG4gICAgY29uc3QgaGVhZGVyID0gbmV3IEhlYWRlclZpZXcoKTtcbiAgICBjb25zdCBydWxlc1NjcmVlbiA9IG5ldyBSdWxlc1ZpZXcoKTtcblxuICAgIHV0aWxzLnNob3dTY3JlZW4odXRpbHMubmV3Q2VudHJhbENvbnRhaW5lcihoZWFkZXIsIHJ1bGVzU2NyZWVuKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNob3dHYW1lKG5hbWVQbGF5ZWw6IHN0cmluZykge1xuICAgIGNvbnN0IGdhbWVNb2RlbCA9IG5ldyBRdWVzdE1vZGVsKHF1ZXN0RGF0YSwgbmFtZVBsYXllbCk7XG4gICAgY29uc3QgZ2FtZVNjcmVlbiA9IG5ldyBHYW1lU2NyZWVuKGdhbWVNb2RlbCk7XG5cbiAgICB1dGlscy5zaG93U2NyZWVuKHV0aWxzLm5ld0NlbnRyYWxDb250YWluZXIoZ2FtZVNjcmVlbikpO1xuICAgIGdhbWVTY3JlZW4uc3RhcnRHYW1lKCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIHNob3dSZXN1bHQoZ2FtZTogSVF1ZXN0TW9kZWwsIGlzRmFpbDogYm9vbGVhbikge1xuICAgIGNvbnN0IGhlYWRlciA9IG5ldyBIZWFkZXJWaWV3KCk7XG4gICAgY29uc3QgZmluZWxTdGF0aXN0aWMgPSBuZXcgRmluZWx5U3RhdGlzdGljVmlldyhnYW1lLCBpc0ZhaWwpO1xuXG4gICAgdXRpbHMuc2hvd1NjcmVlbih1dGlscy5uZXdDZW50cmFsQ29udGFpbmVyKGhlYWRlciwgZmluZWxTdGF0aXN0aWMpKTtcbiAgICB0cnkge1xuICAgICAgcXVlc3RSZXN1bHQgPSBhd2FpdCBMb2FkZXIubG9hZFJlc3VsdCgpO1xuICAgICAgZmluZWxTdGF0aXN0aWMuc2hvd1Njb3JlcyhxdWVzdFJlc3VsdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgICAgUm91dGVyLnNob3dFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBMb2FkZXIuc2F2ZVJlc3VsdHMoZ2FtZSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNob3dFcnJvcihlcnJvcjogRXJyb3IpIHtcbiAgICBjb25zdCBlcnJvclNjcmVlbiA9IG5ldyBFcnJvclZpZXcoZXJyb3IpO1xuICAgIHV0aWxzLnNob3dTY3JlZW4odXRpbHMubmV3Q2VudHJhbENvbnRhaW5lcihlcnJvclNjcmVlbikpO1xuICB9XG59XG4iXX0=