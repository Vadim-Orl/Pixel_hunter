import utils from '../utils/utils.js';
import IntroView from '../view/intro-view.js';
import RulesView from '../view/Rules-view.js';
import QuestModel from '../model/quest-model.js';
import FinelyStatisticView from '../view/FinelyStatistic-view.js';
import GameScreen from '../model/game-screen.js';
import HeaderView from '../view/Header-view.js';
import SplashScreen from '../view/Splash-view.js';
import ErrorView from '../view/Error-view.js';
import Loader from '../utils/loader.js';
import GreetingView from '../view/Greeting-view.js';
let questData;
let questResult;
export default class Router {
    static start() {
        Router.load().catch(Router.showError);
    }
    static async load() {
        const splash = new SplashScreen();
        utils.showScreen(utils.newCentralContainer(splash));
        splash.start();
        try {
            questData = await Loader.testData();
            Router.showWellcom();
        }
        catch (e) {
            if (e instanceof Error) {
                Router.showError(e);
            }
        }
        finally {
            splash.stop();
        }
    }
    static showWellcom() {
        const introScreen = new IntroView();
        utils.showScreen(utils.newCentralContainer(introScreen));
    }
    static showGreeting() {
        const header = new HeaderView();
        const greetingScreen = new GreetingView();
        utils.showScreen(utils.newCentralContainer(header, greetingScreen));
    }
    static showRules() {
        const header = new HeaderView();
        const rulesScreen = new RulesView();
        utils.showScreen(utils.newCentralContainer(header, rulesScreen));
    }
    static showGame(namePlayel) {
        const gameModel = new QuestModel(questData, namePlayel);
        const gameScreen = new GameScreen(gameModel);
        utils.showScreen(utils.newCentralContainer(gameScreen));
        gameScreen.startGame();
    }
    static async showResult(game, isFail) {
        const header = new HeaderView();
        const finelStatistic = new FinelyStatisticView(game, isFail);
        utils.showScreen(utils.newCentralContainer(header, finelStatistic));
        try {
            questResult = await Loader.loadResult();
            finelStatistic.showScores(questResult);
        }
        catch (e) {
            if (e instanceof TypeError) {
                Router.showError(e);
            }
        }
        Loader.saveResults(game);
    }
    static showError(error) {
        const errorScreen = new ErrorView(error);
        utils.showScreen(utils.newCentralContainer(errorScreen));
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eEQsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFpQixFQUFFLE1BQWU7UUFDL0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNoQyxNQUFNLGNBQWMsR0FBRyxJQUFJLG1CQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU3RCxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUM7WUFDSCxXQUFXLEdBQUcsTUFBTSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDeEMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNYLElBQUksQ0FBQyxZQUFZLFNBQVMsRUFBRSxDQUFDO2dCQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLENBQUM7UUFDSCxDQUFDO1FBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFZO1FBQ2xDLE1BQU0sV0FBVyxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNGIiwiZmlsZSI6ImNvbnRyb2xsZXIvcm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzL3V0aWxzLmpzJztcbmltcG9ydCBJbnRyb1ZpZXcgZnJvbSAnLi4vdmlldy9pbnRyby12aWV3LmpzJztcblxuaW1wb3J0IFJ1bGVzVmlldyBmcm9tICcuLi92aWV3L1J1bGVzLXZpZXcuanMnO1xuaW1wb3J0IFF1ZXN0TW9kZWwsIHsgSVF1ZXN0TW9kZWwgfSBmcm9tICcuLi9tb2RlbC9xdWVzdC1tb2RlbC5qcyc7XG5pbXBvcnQgRmluZWx5U3RhdGlzdGljVmlldyBmcm9tICcuLi92aWV3L0ZpbmVseVN0YXRpc3RpYy12aWV3LmpzJztcbmltcG9ydCBHYW1lU2NyZWVuIGZyb20gJy4uL21vZGVsL2dhbWUtc2NyZWVuLmpzJztcbmltcG9ydCBIZWFkZXJWaWV3IGZyb20gJy4uL3ZpZXcvSGVhZGVyLXZpZXcuanMnO1xuaW1wb3J0IFNwbGFzaFNjcmVlbiBmcm9tICcuLi92aWV3L1NwbGFzaC12aWV3LmpzJztcbmltcG9ydCBFcnJvclZpZXcgZnJvbSAnLi4vdmlldy9FcnJvci12aWV3LmpzJztcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi4vdXRpbHMvbG9hZGVyLmpzJztcbmltcG9ydCBHcmVldGluZ1ZpZXcgZnJvbSAnLi4vdmlldy9HcmVldGluZy12aWV3LmpzJztcbmltcG9ydCB7IElHYW1lRGF0YSB9IGZyb20gJy4uL3R5cGVzL3R5cGVzLmpzJztcblxubGV0IHF1ZXN0RGF0YTogSUdhbWVEYXRhW107XG5sZXQgcXVlc3RSZXN1bHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7XG4gIHB1YmxpYyBzdGF0aWMgc3RhcnQoKSB7XG4gICAgUm91dGVyLmxvYWQoKS5jYXRjaChSb3V0ZXIuc2hvd0Vycm9yKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgbG9hZCgpIHtcbiAgICBjb25zdCBzcGxhc2ggPSBuZXcgU3BsYXNoU2NyZWVuKCk7XG4gICAgdXRpbHMuc2hvd1NjcmVlbih1dGlscy5uZXdDZW50cmFsQ29udGFpbmVyKHNwbGFzaCkpO1xuICAgIHNwbGFzaC5zdGFydCgpO1xuICAgIHRyeSB7XG4gICAgICBxdWVzdERhdGEgPSBhd2FpdCBMb2FkZXIudGVzdERhdGEoKTtcbiAgICAgIFJvdXRlci5zaG93V2VsbGNvbSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgUm91dGVyLnNob3dFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgc3BsYXNoLnN0b3AoKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2hvd1dlbGxjb20oKSB7XG4gICAgY29uc3QgaW50cm9TY3JlZW4gPSBuZXcgSW50cm9WaWV3KClcbiAgICB1dGlscy5zaG93U2NyZWVuKHV0aWxzLm5ld0NlbnRyYWxDb250YWluZXIoaW50cm9TY3JlZW4pKVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzaG93R3JlZXRpbmcoKSB7XG4gICAgY29uc3QgaGVhZGVyID0gbmV3IEhlYWRlclZpZXcoKTtcbiAgICBjb25zdCBncmVldGluZ1NjcmVlbiA9IG5ldyBHcmVldGluZ1ZpZXcoKTtcblxuICAgIHV0aWxzLnNob3dTY3JlZW4odXRpbHMubmV3Q2VudHJhbENvbnRhaW5lcihoZWFkZXIsIGdyZWV0aW5nU2NyZWVuKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNob3dSdWxlcygpIHtcbiAgICBjb25zdCBoZWFkZXIgPSBuZXcgSGVhZGVyVmlldygpO1xuICAgIGNvbnN0IHJ1bGVzU2NyZWVuID0gbmV3IFJ1bGVzVmlldygpO1xuXG4gICAgdXRpbHMuc2hvd1NjcmVlbih1dGlscy5uZXdDZW50cmFsQ29udGFpbmVyKGhlYWRlciwgcnVsZXNTY3JlZW4pKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2hvd0dhbWUobmFtZVBsYXllbDogc3RyaW5nKSB7XG4gICAgY29uc3QgZ2FtZU1vZGVsID0gbmV3IFF1ZXN0TW9kZWwocXVlc3REYXRhLCBuYW1lUGxheWVsKTtcbiAgICBjb25zdCBnYW1lU2NyZWVuID0gbmV3IEdhbWVTY3JlZW4oZ2FtZU1vZGVsKTtcblxuICAgIHV0aWxzLnNob3dTY3JlZW4odXRpbHMubmV3Q2VudHJhbENvbnRhaW5lcihnYW1lU2NyZWVuKSk7XG4gICAgZ2FtZVNjcmVlbi5zdGFydEdhbWUoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgc2hvd1Jlc3VsdChnYW1lOiBJUXVlc3RNb2RlbCwgaXNGYWlsOiBib29sZWFuKSB7XG4gICAgY29uc3QgaGVhZGVyID0gbmV3IEhlYWRlclZpZXcoKTtcbiAgICBjb25zdCBmaW5lbFN0YXRpc3RpYyA9IG5ldyBGaW5lbHlTdGF0aXN0aWNWaWV3KGdhbWUsIGlzRmFpbCk7XG5cbiAgICB1dGlscy5zaG93U2NyZWVuKHV0aWxzLm5ld0NlbnRyYWxDb250YWluZXIoaGVhZGVyLCBmaW5lbFN0YXRpc3RpYykpO1xuICAgIHRyeSB7XG4gICAgICBxdWVzdFJlc3VsdCA9IGF3YWl0IExvYWRlci5sb2FkUmVzdWx0KCk7XG4gICAgICBmaW5lbFN0YXRpc3RpYy5zaG93U2NvcmVzKHF1ZXN0UmVzdWx0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgICBSb3V0ZXIuc2hvd0Vycm9yKGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIExvYWRlci5zYXZlUmVzdWx0cyhnYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2hvd0Vycm9yKGVycm9yOiBFcnJvcikge1xuICAgIGNvbnN0IGVycm9yU2NyZWVuID0gbmV3IEVycm9yVmlldyhlcnJvcik7XG4gICAgdXRpbHMuc2hvd1NjcmVlbih1dGlscy5uZXdDZW50cmFsQ29udGFpbmVyKGVycm9yU2NyZWVuKSk7XG4gIH1cbn1cbiJdfQ==